# Define simulation parameters from Table I
# Waveguide dimensions
wg_width = 500e-9;       # Width of the waveguide in meters (500 nm)
wg_thickness = 220e-9;   # Thickness of the waveguide in meters (220 nm)
wg_slab_thickness = 0;   # Slab thickness of the waveguide (0 nm)

# Wavelength sweep parameters
wvl_start = 1500e-9;  # Starting wavelength in meters (1500 nm)
wvl_stop = 1600e-9;   # Ending wavelength in meters (1600 nm)
num_points = 100;     # Number of points for the wavelength sweep
wavelengths = linspace(wvl_start, wvl_stop, num_points);  # Wavelength array

# Initialize arrays for storing results
n_eff_array_EIM = zeros(num_points);  # Effective index for EIM
n_g_array_EIM = zeros(num_points);    # Group index for EIM
n_eff_array_MODE = zeros(num_points); # Effective index for MODE
n_g_array_MODE = zeros(num_points);   # Group index for MODE

# Define a function to set up the waveguide and substrate
function setup_waveguide(material)
    # Create waveguide geometry
    addrect;
    set("name", "waveguide");
    set("x span", wg_width);     # Width of the waveguide
    set("y span", wg_thickness); # Thickness of the waveguide
    set("z span", 2e-6);         # Length of waveguide
    set("material", material);   # Set waveguide material
    
    # Define substrate
    addrect;
    set("name", "substrate");
    set("x span", wg_width + 2e-6);    # Wider substrate
    set("y", -wg_thickness/2 - 2e-6);  # Position below waveguide
    set("y span", 2e-6);               # Thickness of substrate
    set("material", "SiO2 (Silicon Dioxide)");  # Substrate material
endfunction

# Function to perform simulations
function run_simulation(solver_type, n_eff_array, n_g_array, wavelengths)
    for (i = 1:num_points) {
        wavelength = wavelengths(i);
        
        # Set wavelength
        set("wavelength", wavelength);
        run("compute modes");
        
        # Extract effective index and group index
        n_eff = getresult("mode solver", "neff");  # Effective index
        n_g = getresult("mode solver", "ng");      # Group index
        n_eff_array(i) = n_eff(1);  # Store effective index
        n_g_array(i) = n_g(1);      # Store group index
    endfor
endfunction

# Set up and run EIM simulations
set("solver type", "EIM");  # Set solver type to Eigenmode
setup_waveguide("Si (Silicon)");  # Set material to Silicon
run_simulation("EIM", n_eff_array_EIM, n_g_array_EIM, wavelengths);

# Set up and run MODE simulations
set("solver type", "FDE");  # Set solver type to Finite-Difference Eigenmode
setup_waveguide("Si (Silicon)");  # Set material to Silicon
run_simulation("FDE", n_eff_array_MODE, n_g_array_MODE, wavelengths);

# Calculate Dispersion
c = 3e8;  # Speed of light in m/s

# Calculate second derivatives for dispersion
d2n_eff_dlambda2_EIM = gradient(gradient(n_eff_array_EIM, wavelengths), wavelengths);
dispersion_array_EIM = -(wavelengths / c) .* d2n_eff_dlambda2_EIM;

d2n_eff_dlambda2_MODE = gradient(gradient(n_eff_array_MODE, wavelengths), wavelengths);
dispersion_array_MODE = -(wavelengths / c) .* d2n_eff_dlambda2_MODE;

# Plot Effective Index vs Wavelength
figure;
plot(wavelengths * 1e9, n_eff_array_EIM, 'r-', 'LineWidth', 1.5);
hold on;
plot(wavelengths * 1e9, n_eff_array_MODE, 'b--', 'LineWidth', 1.5);
xlabel('Wavelength (nm)');
ylabel('Effective Index (n_{eff})');
title('Effective Index vs Wavelength');
legend('EIM', 'MODE');
grid on;
hold off;

# Plot Group Index vs Wavelength
figure;
plot(wavelengths * 1e9, n_g_array_EIM, 'r-', 'LineWidth', 1.5);
hold on;
plot(wavelengths * 1e9, n_g_array_MODE, 'b--', 'LineWidth', 1.5);
xlabel('Wavelength (nm)');
ylabel('Group Index (n_g)');
title('Group Index vs Wavelength');
legend('EIM', 'MODE');
grid on;
hold off;

# Calculate and display average differences
avg_diff_n_eff = mean(abs(n_eff_array_EIM - n_eff_array_MODE));
avg_diff_n_g = mean(abs(n_g_array_EIM - n_g_array_MODE));

? "Average Difference in Effective Index: " + num2str(avg_diff_n_eff);
? "Average Difference in Group Index: " + num2str(avg_diff_n_g);
